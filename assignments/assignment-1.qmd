---
title: "Assignment 1"
---

My first assignment has three parts..

## (a)

## **Yes, you can use Python with RStudio Team!**

### Gagandeep Singh & Xu Fei

[The Conference Talk that I summarized about. (Click for video)](https://www.rstudio.com/conference/2022/talks/develop-deploy-python-rstudio/)

The majority of people are aware of Python's existence, but they don't know that it can be used in conjunction with R. However, the collaboration that comes with using them together proves beneficial in many aspects of life. For example, a bicycle rental company utilizes this combination to work with bicycle data. They start by accessing data such as locations, distances traveled, and availability status. The process begins with accessing data, followed by the need to transform that data, and ultimately creating and improving a model. The first half can be achieved with R, while the second half is possible with Python. R plays a role in development and integration processes. In addition, they use R Studio to manage and configure APIs and how to use them. They started to connect with R-based ETL and started building a Python model. Then they deployed them. Lastly, they finished with Shiny for Python Dashboard. This also shows us that programming languages with limited capabilities on their own can become much more useful and creative when used together.

## (b)

Three Differences Between R and Python

-   In R, we use the `<-` operator to assign values to variables. In Python, we use the `=` operator.

    R example: x \<- 5

    Pyhton example: x = 5

-   R uses a syntax where you call functions or methods by specifying the function name followed by parentheses.

    Python, on the other hand, uses dot notation with method calls.

    R example: result \<- mean(data)

    Python example: result = data.mean ()

-   R uses 1-based indexing, meaning the first element of a list or vector is \[1\]. Python, on the other hand, uses 0-based indexing, so the first element is \[0\].

    R example: my_list \[1\]

    Python example: my_list \[0\]

## (c)

```{r}
library(dslabs)
data(na_example)
print(na_example)
head(na_example)
is.na(na_example)
goal <- na_example     #I was watching football match when I did it.
goal[is.na(na_example)] <- 0 
print(goal)
number_of_na <- sum(goal == 0)
print(number_of_na)
```
